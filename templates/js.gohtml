{{ define "js" }}
let socket;
let username;
let token;
let scoreboard;
let inputGuess;

const errorMessages = [
    "That is incorrect, what an imbecilic guess!",
    "You are wrong!  Maybe it's time to pack it in?",
    "Are you serious?  What an idiot!",
    "Wrong!  Maybe logic and reason isn't your thing.",
    "If the right answer was a baseball game, you'd be in the parking lot.",
    "Not even close! We're all stunned by your moronic guess."
];

const getErrorMessage = (() => {
    let i = 0;
    return () => {
        return errorMessages[i++ % errorMessages.length];
    };
})();

// https://stackoverflow.com/a/2117523
const getUUID = () => {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
};

const disableFormInputs = () => {
    inputGuess.disabled = true;
};

const enableFormInputs = () => {
    inputGuess.disabled = false;
};

const populatePlayerList = p => {
    // TODO: This can potentially get expensive.
    // Perhaps don't recreate the entire list each
    // time?  It's fine for now, though.
    const tbody = scoreboard.querySelector("tbody");
    tbody.innerHTML = "";
    p.sort((a, b) => {
        if (a.name < b.name) return -1;
        else if (a.name > b.name) return 1;
        else return 0;
    });
    const fragment = new DocumentFragment();

    for (let i = 0; i < p.length; i++) {
        const rowItem = document.createElement("tr");
        const name = p[i].name;
        const score = p[i].score;
        const isCurrentUser = (name == username.value);

        const firstCell = document.createElement("td");
        const firstCellTextNode = document.createTextNode(name);
        firstCell.append(firstCellTextNode);

        const secondCell = document.createElement("td");
        const secondCellTextNode = document.createTextNode(score);
        secondCell.append(secondCellTextNode);

        rowItem.appendChild(firstCell);
        rowItem.appendChild(secondCell);
        if (isCurrentUser) {
            rowItem.className = "bold";
        }

        fragment.appendChild(rowItem);
    }
    tbody.appendChild(fragment);
};

const fadeOut = node => {
    let i = 1;
    node.style.opacity = 1;
    setTimeout(() => {
        const interval = setInterval(() => {
            if (i <= 0) {
                clearInterval(interval);
            }
            node.style.opacity = i;
            i -= 0.1;
        }, 70);
    }, 5000);
};

const sendMsg = (type, data) => {
    // Always send the username and token.
    return socket.send(JSON.stringify({
        type,
        username: username.value.trim(),
        token: token.value.trim(),
        data,
    }));
};

// TODO
const toggleClass = () => {
};

// This doesn't appear to be reliable on some mobile devices.
// Can use this for detecting both closing the browser tab
// and a page refresh.
// For now, we'll use the UUID method (see `getUUID` function).
/*
window.addEventListener("beforeunload", function () {
    sendMsg("guess", "i'm dying");
    if (WebSocket.OPEN == socket.readyState) {
        socket.close();
    }
});
*/

document.addEventListener("DOMContentLoaded", event => {
    const gameboard = document.getElementById("gameboard");
    const gameboardMsg = document.getElementById("gameboardMsg");
    const gameboardMsgWrapper = document.getElementById("gameboardMsgWrapper");
    const question = document.getElementById("question");
    const answers = document.getElementById("answers");
    scoreboard = document.getElementById("scoreboard");
    const notify = document.getElementById("notify");
    const message = document.getElementById("message");

    username = document.getElementById("username");
    token = document.getElementById("token");
    inputGuess = document.getElementById("inputGuess");
    loginError = document.getElementById("loginError");

    // The idea here is to generate a unique id for when the socket is created
    // so the browser connection can be uniquely identified.
    // The server can either use this to lookup the session or later swap it out
    // for something more meaningful (like the APIKey after login).
    const socketURL = `{{ . }}?uuid=${getUUID()}`;
    socket = new WebSocket(socketURL);

    console.log("initiating websocket at", socketURL);

    username.focus();

    document.getElementById("login").addEventListener("submit", event => {
        if (username.value != "" && token.value != "") {
            sendMsg("login", {
                username: username.value,
                token: token.value
            });
        }
        event.preventDefault();
    });

    document.getElementById("gameboard").addEventListener("submit", event => {
        const selected = answers.querySelectorAll("input:checked");
        const v = [];
        selected.forEach(node => v.push(node.value));
        sendMsg("guess", v.sort());
        disableFormInputs();
        event.preventDefault();
    });

    //socket.addEventListener("close", event => {
    //});

    socket.addEventListener("message", event => {
        const d = JSON.parse(event.data);

        switch (d.type) {
            case "error":
                loginError.innerHTML = d.data;
                break;

            case "logout":
                login.classList.remove("hide");
                scoreboard.classList.add("hide");
                gameboard.classList.add("hide");
                break;

            case "notify_all":
                notify.innerHTML = d.data;
                fadeOut(notify);
                break;

            case "notify_player":
                message.innerHTML = d.data;
                fadeOut(message);
                break;

            case "player_add":
                populatePlayerList(d.data);
                login.classList.add("hide");
                scoreboard.classList.remove("hide");
                gameboard.classList.remove("hide");
                disableFormInputs();
                break;

            case "player_delete":
                populatePlayerList(d.data);
                break;

            case "player_message":
                // `d.data` is going to be a boolean.
                let msg;
                if (d.data) {
                    msg = "That is correct!";
                    gameboardMsgWrapper.classList.remove("incorrect");
                    gameboardMsgWrapper.classList.add("correct");
                } else {
                    msg = getErrorMessage();
                    gameboardMsgWrapper.classList.add("incorrect");
                    gameboardMsgWrapper.classList.remove("correct");
                }
                gameboardMsg.innerHTML = msg;
                gameboardMsgWrapper.classList.remove("hide");
                break;

            case "question":
                const parsed = JSON.parse(d.data);
                // It's ok to clear the container using .innerHTML b/c
                // we're not attaching any listeners to any of the
                // elements we're removing so there **shouldn't** be
                // any leaks!  But beware for any future work!
                gameboardMsg.innerHTML = "";
                question.innerHTML = "";
                answers.innerHTML = "";
                gameboardMsgWrapper.classList.add("hide");

                question.innerHTML = parsed.question;
                weight.innerHTML = `( ${parsed.weight} points )`;

                // Give the options single uppercase letter names
                // to avoid any spaces or other characters that could
                // be present in one of the answers and could mangle
                // something or otherwise cause problems.
                // 65 decimal == "A" character
                // 66 decimal == "B" character
                // 67 decimal == "C" character
                // ...
                let n = 65;

                const fragment = new DocumentFragment();
                const ans = parsed.answer;
                const len = ans.length

                const allAnswers = ans.split(",");
                const inputType = allAnswers.length > 1 ?
                    "checkbox" :
                    "radio";

                const choices = parsed.choices;
                if (!choices.length) {
                    const div = document.createElement("div");
                    const textInput = document.createElement("input");
                    textInput.setAttribute("type", "text");
                    textInput.setAttribute("name", "choice");
                    div.appendChild(textInput);
                    fragment.appendChild(div);
                } else {
                    // Skip the first three elements: the question, the correct answer and the weight.
                    for (let i = 0; i < choices.length; i++) {
                        const item = choices[i];
                        const innerDiv = document.createElement("div");

                        const label = document.createElement("label");
                        const opt = document.createElement("input");
                        opt.setAttribute("type", inputType);
                        if (inputType == "radio") {
                            opt.setAttribute("name", "choice");
                        } else {
                            opt.setAttribute("name", item);
                        }
                        opt.setAttribute("value", String.fromCharCode(n++));
                        label.appendChild(opt);

                        const textNode = document.createTextNode(item);
                        label.appendChild(textNode);

                        innerDiv.appendChild(label);
                        fragment.appendChild(innerDiv);
                    }
                }

                answers.appendChild(fragment);
                enableFormInputs();
                break;

            case "update_scoreboard":
                populatePlayerList(d.data);
                break;

            default:
                console.log("unknown data type");
        }

        console.log("RESPONSE: " + event.data);
    });
});
{{ end }}

